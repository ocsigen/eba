(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)

(* RPC button demo *)

(* Service for this demo *)
let%server service =
  Eliom_service.create
    ~path:(Eliom_service.Path ["demo-rpc"])
    ~meth:(Eliom_service.Get Eliom_parameter.unit)
    ()

(* Make service available on the client *)
let%client service = ~%service

(* Name for demo menu *)
let%shared name = "RPC button"

(* Class for the page containing this demo (for internal use) *)
let%shared page_class = "os-page-demo-rpc"

(* A server-side reference that stores data for the current browser *)
let%server my_ref =
  Eliom_reference.eref ~scope:Eliom_common.default_session_scope 0

(* Server-side function that increments my_ref and returns new val *)
let%server incr_my_ref () =
  let%lwt v = Eliom_reference.get my_ref in
  let v = v + 1 in
  let%lwt () = Eliom_reference.set my_ref v in
  Lwt.return v

(* Make server-side function available to the client *)
let%client incr_my_ref =
  ~%(Eliom_client.server_function [%derive.json : unit] incr_my_ref)

let%shared button msg f =
  let btn =
    Eliom_content.Html.
      (D.button ~a:[D.a_class ["button"]] [D.pcdata msg])
  in
  ignore [%client
    ((Lwt.async @@ fun () ->
      Lwt_js_events.clicks
        (Eliom_content.Html.To_dom.of_element ~%btn)
        (fun _ _ -> ~%f ()))
     : unit)
  ];
  btn

(* Page for this demo *)
let%shared page () =
  let btn =
    button "Click to increase server-side value"
      [%client
        ((fun () ->
           let%lwt v = incr_my_ref () in
           Eliom_lib.alert "new value: %d" v;
           Lwt.return ())
         : unit -> unit Lwt.t)
      ]
  in
  Lwt.return Eliom_content.Html.[
    D.p [D.pcdata "This button performs an RPC to increase a server-side \
                   value."];
    D.p [btn]
  ]
