# For all platforms:
# - Install npm
# - Install Cordova:
#   sudo npm install -g cordova
# - Install Cordova plugins dependencies:
#   sudo npm install -g cordova-hot-code-push-cli read-package-json xml2js
#
# For Android:
# - Install JDK 7 or newer (openjdk-7-jdk in Debian)
# - Install qemu-kvm
# - Download Android SDK http://developer.android.com/sdk
# - Untar
# - Run tools/android
# - Install SDK platform tools and SDK build tools (last versions)
# - Install Android API 23 : SDK platform and a system image x64
# - Install Extra/android support repository
# - Install 'Extra/Android Support Library' and 'Extra/Google Repository'
#   (for Crosswalk support)
# - Add directories platform-tools and tools in your PATH
# - Configure an emulator: tools/Manage AVDs/Devic definition
#   (for example Nexus 6 no skin)
#
# If Android emulator take 100 CPU, try:
# hw.audioInput=no
# hw.audioOutput=no
# in ~/.android/avd/<your avd>/config.ini
#
# To debug: adb -e logcat
#
# For Windows:
# Ocsigen-start uses cordova-hot-code-push-plugin
# (https://github.com/nordnet/cordova-hot-code-push) to upload local files (like
# CSS and JavaScript files, images and logo) when the server code changes.
# Unfortunately, this plugin is not yet available for Windows phone.
# However, as ocsigen-start also builds the website part, an idea is to
# run the website into a WebView on Windows phones.
# Even if Cordova allows you to build Windows app, it doesn't authorize you to
# load an external URL without interaction with the user (else, you have the
# error:
# ```
# "APPHOST9624: The app can't use script to load the <URL_HERE> url because the
# url launches another app. Only direct user interaction can launch another
# app."
# ```
# ).
# Another solution is to build an Hosted Web App
# (https://developer.microsoft.com/en-us/windows/bridges/hosted-web-apps). It
# makes it possible to create easily an application based on your website. You
# can also use Windows JavaScript API (no OCaml binding available for the
# moment) to get access to native components.
# You can create the APPX package (package format for Windows app) by using
# manifoldjs, even if you are on MacOS X or Linux: http://manifoldjs.com/
# (contains a video describing the entire process available).
# If you are on Windows, you can use Visual Studio Community.
# Here a complete tutorial from the Windows blog for both versions (with
# manifoldjs and Visual Studio):
# https://blogs.windows.com/buildingapps/2016/02/17/building-a-great-hosted-web-app
#
# The Visual Studio Community solution is recommended to test and debug. You
# can see all errors in the JavaScript console provided in Visual Studio.
#
# If you use the manifoldjs solution, you need to sign the APPX before
# installing it on a device.

CORDOVAPATH := cordova
MOBILESTATICPATH := mobile
WWW_PATH := local/var/www/$(PROJECT_NAME)

mobile-all: assets android browser # ios

# Errors definition

define ERROR_APP_SERVER

Error: APP_SERVER environment is not set!

You need to define the environment variable APP_SERVER in order to build the
mobile app. This server is the one your mobile app is connecting to and should
be running when building the app, so the matching Eliom JS and CSS files can be
retrieved.

Example:
$$ make APP_SERVER=http://eliomapp.example.com APP_REMOTE=yes android

endef

define ERROR_APP_REMOTE

Error: APP_REMOTE environment is not set!

You need to define the environment variable APP_REMOTE to 'yes' or 'no' in
order to build the mobile app. If set to 'yes', JS and CSS files will be
retrieved from the remote server defined in APP_SERVER; if set to 'no', locally
generated ones will be used instead.

Example:
$$ make APP_REMOTE=yes APP_SERVER=http://eliomapp.example.com android

endef

define ERROR_DOWNLOAD_JS

Error: Downloading of Eliom JS file from server $(APP_SERVER) has failed.
Please check that $(APP_SERVER) is running properly and try again.

endef

define ERROR_DOWNLOAD_CSS

Error: Downloading of Eliom CSS file from server $(APP_SERVER) has failed.
Please check that $(APP_SERVER) is running properly and try again.

endef

# Warnings definition

define WARNING_NO_CORDOVA

WARNING: 'cordova' command not found in PATH. Assuming we don't need it for the
current build. It makes sense if you only need Hot Code Push update files on a
server, for example. If you want to build the actual app, you need to install
Cordova. See the documentation at the beginning of 'Makefile.mobile' for
detailed instructions.

endef


# Environment variables definiton

APPJS := $(CORDOVAPATH)/www/$(PROJECT_NAME).js
APPCSS := $(CORDOVAPATH)/www/css/$(PROJECT_NAME).css

# Mobile app related variables checking

check-app-env:
ifeq ($(strip $(APP_SERVER)),)
	$(error $(ERROR_APP_SERVER))
endif
ifeq ($(strip $(APP_REMOTE)),)
	$(error $(ERROR_APP_REMOTE))
endif

$(APPJS): $(JS_PREFIX).js
ifeq ($(APP_REMOTE),yes)
	APPJS_FILE=$$(curl -s -f $(APP_SERVER) | cat | grep -E -o -m 1 '$(PROJECT_NAME)_[a-f0-9]*?\.js') &&\
	curl -s -o $@ $(APP_SERVER)/$$APPJS_FILE
else
	cp -f $(WWW_PATH)/`readlink $(JS_PREFIX).js` $@
endif

$(APPCSS):
ifeq ($(APP_REMOTE),yes)
	APPCSS_FILE=$$(curl -s -f $(APP_SERVER) | cat | grep -E -o -m 1 '$(PROJECT_NAME)_[a-f0-9]*?\.css') &&\
	curl -s -o $@ $(APP_SERVER)/css/$$APPCSS_FILE
else
	cp -f $(WWW_PATH)/css/`readlink $(CSS_PREFIX).css` $@
endif

# Regenerate config files at each build, in case an environment variable has
# changed.
.PHONY: clean icons spashes $(IOS_SPLASHES) chcp app-config check-app-env \
	$(APPJS) $(APPCSS) \
	$(ADD_PLATFORMS) $(PLATFORMS) $(EMULATE_PLATFORMS) $(RUN_PLATFORMS) \
	$(CORDOVAPATH)/www/chcp.json \
	$(CORDOVAPATH)/www/eliom.html \
	$(CORDOVAPATH)/www/index.html \
	$(CORDOVAPATH)/config.xml

# Get Cordova version to check if it is installed (if not, variable is empty)
CORDOVA_VERSION := $(shell cordova --version 2>/dev/null)

# Necessary Cordova and static files directories
CORDOVA_DIRS := www www/css www/fonts www/images www/img www/js

# If Cordova is installed, use it to create a new project
# If not, we assume we don't need a full fledge project and simply create
# necessary directories (typically on a server where we only want to set up
# Hot Code Push).
$(CORDOVAPATH):
ifdef CORDOVA_VERSION
	cordova create $(CORDOVAPATH) $(MOBILE_APP_ID) "$(MOBILE_APP_NAME)"
	rm -f $(CORDOVAPATH)/www/css/index.css
	rm -f $(CORDOVAPATH)/www/js/index.js
	rm -f $(CORDOVAPATH)/www/img/logo.png
	rm -f $(CORDOVAPATH)/www/index.html
	rm -f $(CORDOVAPATH)/config.xml
	$(foreach dir,$(CORDOVA_DIRS),mkdir -p $@/$(dir);)
else
	$(warning WARNING_NO_CORDOVA)
	[ -d $@ ] || mkdir $@
	$(foreach dir,$(CORDOVA_DIRS),mkdir -p $@/$(dir);)
endif

$(CORDOVAPATH)/config.xml: mobile/config.xml.in $(CORDOVAPATH)
	sed -e "s,%%APPSERVER%%,$(APP_SERVER),g" \
	    -e "s,%%APPID%%,$(MOBILE_APP_ID),g" \
	    -e "s,%%MOBILE_APP_NAME%%,$(MOBILE_APP_NAME),g" \
	    -e "s,%%MOBILE_APP_VERSION%%,$(MOBILE_APP_VERSION),g" \
	    -e "s,%%MOBILE_DESCRIPTION%%,$(MOBILE_DESCRIPTION),g" \
	    -e "s,%%MOBILE_AUTHOR_EMAIL%%,$(MOBILE_AUTHOR_EMAIL),g" \
	    -e "s,%%MOBILE_AUTHOR_HREF%%,$(MOBILE_AUTHOR_HREF),g" \
	    -e "s,%%MOBILE_AUTHOR_DESCRIPTION%%,$(MOBILE_AUTHOR_DESCRIPTION),g" \
	    -e "s,%%MOBILE_ANDROID_SDK_VERSION%%,$(MOBILE_ANDROID_SDK_VERSION),g" \
	    mobile/config.xml.in > $@

# Function to list files in a given directory $(1), and change prefix directory
# to the target one $(2)
# Example: $(call static_targets,$(SOURCE_DIR),$(TARGET_DIR))
static_targets = $(shell find $(1) -type f -printf "$(2)/%P\n")

CORDOVA_STATIC_FILES := \
	$(CORDOVAPATH)/.chcpignore \
	$(CORDOVAPATH)/res \
	$(call static_targets,$(MOBILESTATICPATH)/www,$(CORDOVAPATH)/www)

# FIXME: duplicate rule warning for 'cordova/www/css/os_test.css'
LOCAL_STATIC_FILES = $(call static_targets,$(LOCAL_STATIC),$(CORDOVAPATH)/www)

$(CORDOVAPATH)/www/chcp.manifest: $(APPJS) $(APPCSS) \
	$(CORDOVAPATH) $(CORDOVA_STATIC_FILES) $(LOCAL_STATIC_FILES)
	cd $(CORDOVAPATH) ; cordova-hcp build
	rm -f $(CORDOVAPATH)/www/chcp.json

TIMESTAMP := $(shell date +%y%m%d-%H%M%S)

$(WWW_PATH)/update/conf/chcp.json: $(WWW_PATH)/update/$(TIMESTAMP)
	mkdir -p $(WWW_PATH)/update/conf
	cp $</chcp.json $@

$(CORDOVAPATH)/www/chcp.json: mobile/chcp.json.in \
		$(CORDOVAPATH)/www/chcp.manifest
	sed -e "s,%%APPSERVER%%,$(APP_SERVER),g" \
	    -e "s,%%DATE%%,$(TIMESTAMP),g" \
		$< > $@

# Static files dependencies: if a file changes in these directory, a new copy
# of static files will be triggered

$(CORDOVA_STATIC_FILES): $(CORDOVAPATH)/%: $(MOBILESTATICPATH)/%
	cp -rf $< $@

$(LOCAL_STATIC_FILES): $(CORDOVAPATH)/www/%: $(LOCAL_STATIC)/%
	cp -rf $< $@

# Cordova config files

$(CORDOVAPATH)/www/index.html: $(CORDOVAPATH) $(APPJS) mobile/index.html.in
	HASH=$$(md5sum $(APPJS) | cut -d ' ' -f 1) && \
	sed -e "s,%%APPNAME%%,$(PROJECT_NAME)_$$HASH,g" \
	    -e "s,%%APPSERVER%%,$(APP_SERVER),g" \
	    -e "s,%%MOBILE_APP_NAME%%,$(MOBILE_APP_NAME),g" \
	    mobile/index.html.in > \
	$(CORDOVAPATH)/www/index.html

$(CORDOVAPATH)/www/eliom.html: $(CORDOVAPATH) \
	$(APPJS) $(APPCSS) mobile/eliom.html.in
	JS_HASH=$$(md5sum $(APPJS) | cut -d ' ' -f 1) && \
	CSS_HASH=$$(md5sum $(APPCSS) | cut -d ' ' -f 1) && \
	sed -e "s,%%APPNAME%%,$(PROJECT_NAME)_$$JS_HASH,g" \
	    -e "s,%%PROJECTNAME%%,$(PROJECT_NAME),g" \
	    -e "s,%%APPSERVER%%,$(APP_SERVER),g" \
	    mobile/eliom.html.in > $@

mobile/eliom_loader.byte: mobile/eliom_loader.ml
	ocamlfind ocamlc \
	    -package js_of_ocaml,js_of_ocaml.ppx,lwt.ppx \
	    -linkpkg -o mobile/eliom_loader.byte \
	    $<

$(CORDOVAPATH)/www/eliom_loader.js: mobile/eliom_loader.byte
	js_of_ocaml $< -o $@

app-config: $(CORDOVAPATH)/www/index.html \
	$(CORDOVAPATH)/www/eliom.html \
	$(CORDOVAPATH)/www/eliom_loader.js \
	$(CORDOVAPATH)/config.xml \
	$(CORDOVAPATH)/www/chcp.manifest \
	$(CORDOVAPATH)/www/chcp.json

$(WWW_PATH)/update/$(TIMESTAMP): app-config check-app-env $(CORDOVA_STATIC_FILES) $(LOCAL_STATIC_FILES)
	mkdir -p $(WWW_PATH)/update
	cp -r $(CORDOVAPATH)/www $@

chcp: $(WWW_PATH)/update/conf/chcp.json

assets: $(CORDOVAPATH) icons chcp

# cordova platform rules

# Add the platform to the Cordova project.
# FIXME/IMPROVEME: true is used to avoid to stop building
# the application if the platform is already added. The disadvantage of
# this method is any error will be ignored.
$(CORDOVAPATH)/platforms/%: check-app-env assets $(CORDOVAPATH)
	cd $(CORDOVAPATH) ;\
	cordova platform add $* ; true

ADD_PLATFORMS := add-android add-browser add-ios add-windows

$(ADD_PLATFORMS): add-%: $(CORDOVAPATH)/platforms/%

# cordova build rules

# debug build by default
PLATFORMS := android ios browser

$(PLATFORMS): %: check-app-env assets add-%
	cd $(CORDOVAPATH) ;\
	cordova build $(CORDOVA_FLAGS) $*

# release build
RELEASE_PLATFORMS := android-release ios-release

$(RELEASE_PLATFORMS): CORDOVA_FLAGS = -release
$(RELEASE_PLATFORMS): %-release: %

# cordova emulate rules

EMULATE_PLATFORMS := emulate-android emulate-ios

$(EMULATE_PLATFORMS): emulate-%: % check-app-env assets
	cd $(CORDOVAPATH) ;\
	cordova emulate --nobuild $*

# cordova run rules

RUN_PLATFORMS := run-android run-ios run-browser

# Run the mobile app on a platform
# run-(android|ios|windows)
$(RUN_PLATFORMS): run-%: % check-app-env assets
	cd $(CORDOVAPATH) ;\
	cordova run --nobuild $*

# Icons definition

ANDROID_ICON_NAMES = ldpi mdpi hdpi xhdpi xxhdpi xxxhdpi
ANDROID_ICONS_PATH = $(MOBILESTATICPATH)/res/android
ANDROID_ICONS      = $(foreach name,$(ANDROID_ICON_NAMES),$(ANDROID_ICONS_PATH)/$(name).png)

IOS_ICON_NAMES = \
	icon-40 icon-40@2x \
	icon-50 icon-50@2x \
	icon-60 icon-60@2x icon-60@3x \
	icon-72 icon-72@2x \
	icon-76 icon-76@2x \
	icon-83.5@2x \
	icon icon@2x \
	icon-small icon-small@2x icon-small@3x

IOS_ICONS_PATH   = $(MOBILESTATICPATH)/res/ios
IOS_ICONS        = $(foreach name,$(IOS_ICON_NAMES),$(IOS_ICONS_PATH)/$(name).png)

# Icons creation (ImageMagick is necessary)
ICON_PNG         := assets/images/icon.png
convert_android  = convert -background none -resize
convert_ios      = convert -background white -resize

$(ANDROID_ICONS_PATH) $(IOS_ICONS_PATH):
	mkdir -p $@

# Simple icons (Android)
$(ANDROID_ICONS_PATH)/icon-%.png: $(ICON_PNG) $(ANDROID_ICONS_PATH)
	$(convert_android) $*x$* $< $@

# Simple icons (iOS)
$(IOS_ICONS_PATH)/icon-%.png: $(ICON_PNG) $(IOS_ICONS_PATH)
	$(convert_ios) $*x$* $< $@

# Double size icons (iOS)
$(IOS_ICONS_PATH)/icon-%@2x.png: $(ICON_PNG) $(IOS_ICONS_PATH)
	size=$$((2 * $*)) ;\
	$(convert_ios) $${size}x$${size} $< $@

# Triple size icons (iOS)
$(IOS_ICONS_PATH)/icon-%@3x.png: $(ICON_PNG) $(IOS_ICONS_PATH)
	size=$$((3 * $*)) ;\
	$(convert_ios) $${size}x$${size} $< $@

# iOS icons with special names
# To add one, use a rule like this:
# $(ICON_WITH_SPECIAL_NAME): $(ICON_WITH_PIXELS.png); cp $< $@
$(IOS_ICONS_PATH)/icon-small.png: $(IOS_ICONS_PATH)/icon-29.png; cp $< $@
$(IOS_ICONS_PATH)/icon-small@2x.png: $(IOS_ICONS_PATH)/icon-29@2x.png; cp $< $@
$(IOS_ICONS_PATH)/icon-small@3x.png: $(IOS_ICONS_PATH)/icon-29@3x.png; cp $< $@
$(IOS_ICONS_PATH)/icon.png: $(IOS_ICONS_PATH)/icon-57.png; cp $< $@
$(IOS_ICONS_PATH)/icon@2x.png: $(IOS_ICONS_PATH)/icon-57@2x.png; cp $< $@
$(IOS_ICONS_PATH)/icon-83.5@2x.png: $(IOS_ICONS_PATH)/icon-167.png; cp $< $@

# Android icons
$(ANDROID_ICONS_PATH)/ldpi.png: $(ANDROID_ICONS_PATH)/icon-36.png; cp $< $@
$(ANDROID_ICONS_PATH)/mdpi.png: $(ANDROID_ICONS_PATH)/icon-48.png; cp $< $@
$(ANDROID_ICONS_PATH)/hdpi.png: $(ANDROID_ICONS_PATH)/icon-72.png; cp $< $@
$(ANDROID_ICONS_PATH)/xhdpi.png: $(ANDROID_ICONS_PATH)/icon-96.png; cp $< $@
$(ANDROID_ICONS_PATH)/xxhdpi.png: $(ANDROID_ICONS_PATH)/icon-144.png; cp $< $@
$(ANDROID_ICONS_PATH)/xxxhdpi.png: $(ANDROID_ICONS_PATH)/icon-192.png; cp $< $@

# Launch images (iOS)
# Format: SIZE.NAME
IOS_SPLASHES = \
	640x1136.Default-568h@2x~iphone \
	750x1334.Default-667h \
	1242x2208.Default-736h \
	2208x1242.Default-Landscape-736h \
	2048x1536.Default-Landscape@2x~ipad \
	1024x768.Default-Landscape~ipad \
	1536x2048.Default-Portrait@2x~ipad \
	768x1024.Default-Portrait~ipad \
	640x960.Default@2x~iphone \
	320x480.Default~iphone

convert_splash_ios = convert -background white -gravity center -extent

$(IOS_SPLASHES): $(ICON_SVG) $(IOS_ICON_PATH)
	splash=$@; \
	size=$${splash%%.*}; \
	name=$${splash#*.}; \
	$(convert_splash_ios) $$size $< $(IOS_ICONS_PATH)/$$name.png

splashes: $(IOS_SPLASHES)

# Only this rule must be used to generate the icons.
icons: $(ANDROID_ICONS) $(IOS_ICONS)

# Cleaning

mobile-clean:
	rm -rf $(CORDOVAPATH)
