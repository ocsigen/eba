#----------------------------------------------------------------------
#           SETTINGS FOR THE ELIOM PROJECT %%%PROJECT_NAME%%%
#----------------------------------------------------------------------


##----------------------------------------------------------------------
## The following part is only used for PGOcaml

# Database name
DATABASE := %%%PROJECT_NAME%%%

# Database port
PORT := 3000

# Database host
HOST := localhost

# User used when connecting to the database
# default: environment variable USER
# --------------
USER := $(USER)

# DO NOT EDIT
ENV_PGOCAML := PGDATABASE=$(DATABASE) PGPORT=$(PORT) PGUSER=$(USER) PGHOST=$(HOST)

## OVERLOAD Required binaries
ELIOMC            := $(ENV_PGOCAML) $(ELIOMC)
ELIOMOPT          := $(ENV_PGOCAML) $(ELIOMOPT)
JS_OF_ELIOM       := $(ENV_PGOCAML) $(JS_OF_ELIOM)
ELIOMDEP          := $(ENV_PGOCAML) $(ELIOMDEP)
OCSIGENSERVER     := $(ENV_PGOCAML) $(OCSIGENSERVER)
OCSIGENSERVER.OPT := $(ENV_PGOCAML) $(OCSIGENSERVER.OPT)

## Here are some extra rules to help you to manage your database

# yes: will create the database in the $(TEXT_PREFIX)/db
# no: will use the default database daemon
LOCAL := yes

PSQL_DIR := local_db
PSQL_LOG := $(PSQL_DIR)/log
PSQL_FILE := $(DATABASE).sql
PSQL_PARAMS := -p $(PORT) -h $(HOST)

$(PSQL_DIR):
	-mkdir -p $@


# Find the exec pg_ctl
# Default command. If the command isn't available
# the program will use the latest pg_ctl in the install folder
def_pg_ctl := pg_ctl
pg_install_folder := /usr/lib/postgresql/

pg_ctl := ""

# Try to see if this command is in the path. Non empty if command available
is_def_pg_ctl_installed := $(shell $(def_pg_ctl) --version 2>/dev/null)

ifdef is_def_pg_ctl_installed
pg_ctl := $(def_pg_ctl) # Command available

else
# On debian/ubuntu try to find in pg_install_folder/<last version>/bin
debian_pg_ctl := $(shell (echo -n $(pg_install_folder);(ls $(pg_install_folder) -1 | sort -k1,1n | tail -1 | tr -d '\n'); echo "/bin/pg_ctl") 2>/dev/null)
is_debian := $(shell $(debian_pg_ctl) --version 2>/dev/null)

ifdef is_debian
pg_ctl := $(debian_pg_ctl)

else
pg_ctl := ""
endif
endif

ifeq ($(pg_ctl),"")
$(error "no 'pg_ctl' binary found, please edit 'def_pg_ctl' in Makefile.local")
endif

# unix_socket_directories is for postgres >= 9.3 (before singular)
pg_ctl_version := $(shell $(pg_ctl) --version | grep -o "[0-9][0-9]*\.[0-9][0-9]*") # I don't use '\+' because I'm not sure every grep implementation escape +
is_recent := $(shell echo "$(pg_ctl_version)>=9.3" | bc -l)

ifeq ($(is_recent),1)
sock_dir := "unix_socket_directories"
else
sock_dir := "unix_socket_directory"
endif

ifeq ($(LOCAL),yes)

db-init: $(PSQL_DIR)
	@echo "pg_ctl : $(pg_ctl), version $(pg_ctl_version)"
	$(pg_ctl) initdb -D $(PSQL_DIR) -U $(USER)
	echo "\n$(sock_dir)='$(PWD)/$(PSQL_DIR)'\n" >> $(PSQL_DIR)/postgresql.conf
	echo "\nexternal_pid_file='$(PWD)/$(PSQL_DIR)/$(DATABASE).pid'\n">>$(PSQL_DIR)/postgresql.conf
	$(pg_ctl) -o "-F -p $(PORT)" -D $(PSQL_DIR) -l $(PSQL_LOG) start
	echo "Waiting for server start...." && sleep 3
	createdb -h $(PWD)/$(PSQL_DIR) -p $(PORT) $(DATABASE)
	psql -h $(PWD)/$(PSQL_DIR) -p $(PORT) $(DATABASE) -f $(DATABASE).sql

db-start:
	$(pg_ctl) -o "-F -p $(PORT)" -D $(PSQL_DIR) -l $(PSQL_LOG) start

db-stop:
	$(pg_ctl) -D $(PSQL_DIR) -l $(PSQL_LOG) stop

db-status:
	$(pg_ctl) -D $(PSQL_DIR) -l $(PSQL_LOG) status

db-delete:
	$(pg_ctl) -D $(PSQL_DIR) -l $(PSQL_LOG) stop || true
	rm -rf $(PSQL_DIR)

psql:
	psql -h $(PWD)/$(PSQL_DIR) -p $(PORT) $(DATABASE)

else

db-start:
	$(pg_ctl) -o "-F -p $(PORT)" start

db-status:
	$(pg_ctl) status

db-stop:
	$(pg_ctl) stop

endif

db-create:
	createdb $(PSQL_PARAMS) $(DATABASE)
	psql $(PSQL_PARAMS) -d $(DATABASE) -f $(PSQL_FILE)

db-update:
	psql $(PSQL_PARAMS) -d $(DATABASE) -f $(PSQL_FILE)

db-drop:
	dropdb $(PSQL_PARAMS) $(DATABASE)

db-psql:
	psql $(PSQL_PARAMS) $(DATABASE)

##----------------------------------------------------------------------
