(* This file was generated by Ocsigen Start.
   Feel free to use it, modify it, and redistribute it as you wish. *)

[%%shared
   open Eliom_content.Html
   open Eliom_content.Html.F
]

let%shared bind_popup_button
    ?a
    ~button
    ~(popup_content : ((unit -> unit Lwt.t) -> [< Html_types.div_content ]
                         Eliom_content.Html.elt Lwt.t) Eliom_client_value.t)
    ()
  =
  ignore
    [%client
      (Lwt.async (fun () ->
         Lwt_js_events.clicks
           (Eliom_content.Html.To_dom.of_element ~%button)
           (fun _ _ ->
              let%lwt _ =
                Ot_popup.popup
                  ?a:~%a
                  ~close_button:[]
                  ~%popup_content
              in
              Lwt.return ()))
       : _)
    ]

let%shared connect_form () =
  D.Form.post_form ~service:Os_services.connect_service
    (fun ((login, password), keepmeloggedin) ->
       [ Form.input
           ~a:[a_placeholder [%i18n S.your_email ~capitalize:true]]
           ~name:login
           ~input_type:`Email
           Form.string
       ; Form.input
           ~a:[a_placeholder [%i18n S.your_password ~capitalize:true]]
           ~name:password
           ~input_type:`Password
           Form.string
       ; label [ Form.bool_checkbox_one
                   ~a:[a_checked ()]
                   ~name:keepmeloggedin
                   ()
               ; pcdata [%i18n S.keep_logged_in]]
       ; Form.input
           ~a:[a_class ["button" ; "os-sign-in-btn"]]
           ~input_type:`Submit
           ~value:[%i18n S.sign_in ~capitalize:true]
           Form.string
       ]) ()

let%shared forgotpwd_button ?(close = [%client (fun () -> () : unit -> unit)])
    () =
  let popup_content = [%client fun _ -> Lwt.return @@
    div [ h2 [%i18n recover_password]
        ; Os_view.forgot_password_form ()] ]
  in
  let button_name = [%i18n S.forgot_your_password_q ~capitalize:true] in
  let button = D.Raw.a ~a:[ a_class ["os-forgot-pwd-link"]
                          ; a_onclick [%client fun _ -> ~%close () ] ]
      [pcdata button_name]
  in
  bind_popup_button
    ~a:[a_class ["os-forgot-pwd"]]
    ~button
    ~popup_content
    ();
  button


let%shared sign_in_button () =
  let popup_content = [%client fun close -> Lwt.return @@
    div [ h2 [%i18n sign_in ~capitalize:true]
        ; connect_form ()
        ; forgotpwd_button ~close:(fun () -> Lwt.async close) ()
        ] ]
  in
  let button_name = [%i18n S.sign_in ~capitalize:true] in
  let button =
    D.button ~a:[a_class ["button" ; "os-sign-in-btn"]] [pcdata button_name]
  in
  bind_popup_button
    ~a:[a_class ["os-sign-in"]]
    ~button
    ~popup_content
    ();
  button


let%shared sign_up_button () =
  let popup_content = [%client fun _ -> Lwt.return @@
    div [ h2 [%i18n sign_up ~capitalize:true]
        ; Os_view.sign_up_form ()] ]
  in
  let button_name = [%i18n S.sign_up ~capitalize:true] in
  let button =
    D.button ~a:[a_class ["button" ; "os-sign-up-btn"]] [pcdata button_name]
  in
  bind_popup_button
    ~a:[a_class ["os-sign-up"]]
    ~button
    ~popup_content
    ();
  button


let%shared disconnect_button () =
  D.Form.post_form ~service:Os_services.disconnect_service
    (fun _ -> [
         Form.button_no_value
           ~a:[ a_class ["button"] ]
           ~button_type:`Submit
           [%%%MODULE_NAME%%%_icons.F.signout (); pcdata [%i18n S.logout ~capitalize:true]]
       ]) ()


let%shared disconnect_link ?(a = []) () =
  Eliom_content.Html.D.Raw.a
    ~a:(a_onclick [%client fun _ ->
      Lwt.async (fun () ->
        Eliom_client.change_page ~service:Os_services.disconnect_service () ())
    ]
        ::a)
    [ %%%MODULE_NAME%%%_icons.F.signout (); pcdata [%i18n S.logout ~capitalize:true]]


let%shared connected_user_box ~user =
  let username = Os_view.username user in
  D.div ~a:[a_class ["connected-user-box"]]
    [ Os_view.avatar user
    ; div [ username ]
    ]


let%shared connection_box () =
  let sign_in    = sign_in_button () in
  let sign_up    = sign_up_button () in
  Lwt.return @@ div ~a:[ a_class ["os-connection-box"] ]
    [ sign_in
    ; sign_up
    ]



let%shared user_box ?user () =
  match user with
  | None -> connection_box ()
  | Some user -> Lwt.return (connected_user_box ~user)
